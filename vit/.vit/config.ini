[taskwarrior]
# Full path to the Taskwarrior configuration file. Tilde will be expanded to
# the user's home directory.
# NOTE: This setting is overridden by the TASKRC environment variable.
#taskrc = ~/.taskrc


[vit]
mouse = True
editor = nvim

# Boolean. If true, hitting backspace against an empty prompt aborts the prompt.
#abort_backspace = False

[report]

indent_subprojects = True

# Boolean. If true, display report rows with alternating background colors.
row_striping = False
#row_striping = True


[marker]

# Boolean. Enables markers. Markers are configurable labels that appear on the
# left side of a report to indicate information about a task when the displayed
# report does not contain the related column.
# For example, let's suppose you have a 'notes' UDA configured. You'd like to
# see some indication that a task has a note, without displaying the full note
# column in reports. You could configure a marker for that custom UDA as
# follows:
#   uda.notes.label = (N)
# Then, when a listed task has a note associated with it, you'll see the
# marker '(N)' displayed in the leftmost column of any report that displays the
# task in question.
#enabled = True

# What columns to generate markers for. Can either be 'all' for all columns, or
# a comma separated list of columns to enable markers for. Possible columns
# are:
#  depends,description,due,project,recur,scheduled,start,status,tags,until
#columns = all

# The header label for the markers column when it is displayed.
#header_label =

# Boolean. If true, an associated color value must be configured in the
# Taskwarrior configuration in order for the marker to be displayed. If false,
# and no Taskwarrior color configuration is present for the matching marker,
# then it is not displayed.
# For example, if this is set to True, then for the above-mentioned 'notes'
# marker to be displayed, a matching Taskwarrior color configuration for the
# 'notes' UDA must be present, e.g.:
#   color.uda.notes=yellow
#require_color = True

# Boolean. If true, subprojects of a project will also display the configured
# root project's marker, if the subproject itself does not have its own marker
# configured.
# For example, given the following projects:
#   Foo
#   Foo.Bar
# If this value is set to True, and the Foo project has a configured marker,
# then Foo.Bar would also display Foo's marker.
#include_subprojects = True

# Below are listed all of the available markers, with their default label.
# To disable a specific marker, set its label to empty. Any section enclosed
# in brackets should be replaced by the appropriate identifier, eg.
# [project_name] with the actual name of a project.
#active.label = (A)
#blocked.label = (BD)
#blocking.label = (BG)
#completed.label = (C)
#deleted.label = (X)
#due.label = (D)
#due.today.label = (DT)
#keyword.label = (K)
#keyword.[keyword_name].label =
#overdue.label = (OD)
#project.label = (P)
#project.none.label =
#project.[project_name].label =
#recurring.label = (R)
#scheduled.label = (S)
#tag.label = (T)
#tag.none.label =
#tag.[tag_name].label =
#uda.label =
#uda.priority.label = (PR)
#uda.[uda_name].label =


[color]

# Boolean. If true, use the colors in Taskwarrior's configuration to colorize
# reports. Note that VIT uses a fundamentally different paradigm for
# colorization, which combines tying coloring to associated report columns in
# combination with markers (see above). This setting works independently of
# Taskwarriors 'color' config setting.
#enabled = True

# Boolean. If true, subprojects of a project will also display the configured
# root project's color, if the subproject itself does not have its own color
# configured.
# For example, given the following projects:
#   Foo
#   Foo.Bar
# If this value is set to True, and the Foo project has a configured color,
# then Foo.Bar would also display Foo's color.
#include_subprojects = True

# For the Taskwarrior color configuration, there are three special values:
#   color.project.none
#   color.tag.none
#   color.uda.[uda_name].none
# If any of these are configured for color, then the label below will be used
# in the related column to display the color configuration.
#none_label = [NONE]


[keybinding]

# This section allows you to override the configured keybindings, associate
# additional keybindings with VIT actions, and set up macros triggered by a
# keybinding.

# Meta keys are enclosed in angle brackets, variables are enclosed in curly
# brackets. Keybindings here can either be:
#   - Associated with a single VIT action
#   - A macro that describes a series of key presses to replay

# For VIT actions, the form is:
#   keys[,keys] = {ACTION_NAME}
# For example, to associate the keybinding 'zz' with the undo action:
#   zz = {ACTION_TASK_UNDO}
# To only disable a keybinding, use the special noop action:
#   w = {ACTION_NOOP}
#   wa = {ACTION_TASK_WAIT}
# The above would disable the task wait action for the 'w' key, and instead
# assign it to the 'wa' keybinding.
# For capital letter keybindings, use the letter directly:
#   D = {ACTION_TASK_DONE}
q = {ACTION_QUIT}
R = {ACTION_REFRESH}
v = :!wr nvim <Enter>
<Ctrl> t = :!wr nt <Enter>
<Ctrl> p = :!wr ~/Scripts/ProjectCreateWithTask.sh <Enter>
C = :!wr task calendar

#Reports
ri = :in <Enter>
rn = :next <Enter>
rw = :waiting <Enter>
rb = :blocking <Enter>
rs = :+WORK <Enter>
rp = :+personal <Enter>

1 = :1
2 = :2
3 = :3
4 = :4
5 = :5
6 = :6
7 = :7
8 = :8
9 = :9


# For a list of available actions, run 'vit --list-actions'.
# A great reference for many of the available meta keys, and understanding the
# default keybindings is the 'keybinding/vi.ini' file.

# For macros, the form is:
#   keys[,keys] = keypresses
# For example, to map the 'o' key to opening the OneNote script, passing it
# the currently focused task UUID:
#   o = :!wr onenote {TASK_UUID}<Enter>

# The special '{TASK_[attribute]}' variable can be used in any macro, and it
# will be replaced with the value of the attribute for the currently
# highlighted task. Any attribute listed in 'task _columns' is supported, e.g.
#   o = :!wr echo project is {TASK_PROJECT}<Enter>

# Multiple keybindings can be associated with the same action/macro, simply
# separate the keybindings with a comma:
#   <Ctrl> z,zz = {ACTION_TASK_UNDO}

# 'Special' keys are indicated by enclosing them in brackets. VIT supports the
# following special keys on either side of the keybinding declaration, by
# internally translating them into the single character:
#
#     <Colon>
#     <Equals>
#     <Space>
#     <Semicolon>
#
# Under the hood, VIT uses the Urwid mappings for keyboard input:
#   http://urwid.org/manual/userinput.html
#
# Any modifier, navigation, or function keys can be described in the VIT
# keybinding configuration by wrapping them in angle brackets, matching the
# correct Urwid keyboard input structure:

; <Ctrl> a = :!wr task-attach-add {TASK_UUID}
; <Ctrl> n = :!wr task-attach-new {TASK_UUID}
; <Ctrl> o = :!wr task-attach-open {TASK_UUID} <Enter>

